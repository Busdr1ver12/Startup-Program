#include <iostream>
#include <vector>
#include <queue>
#include <unordered_map>

using namespace std;

// Define global constants:
const size_t PAGE_SIZE = 4096;          // 4KB pages.
const size_t NUM_VIRTUAL_PAGES = 16;      // Virtual address space size for each process.
const size_t NUM_PHYSICAL_FRAMES = 8;     // Total available physical frames.

// Structure for an individual page table entry.
struct PageTableEntry {
    bool valid;       // Is the page loaded in physical memory?
    size_t frameNumber; // The physical frame index.
    bool dirty;       // Has the page been modified?
    PageTableEntry() : valid(false), frameNumber(0), dirty(false) {}
};

// Each process in our simulation has its own page table.
class Process {
public:
    int pid;
    vector<PageTableEntry> pageTable;
    
    Process(int id): pid(id) {
        pageTable.resize(NUM_VIRTUAL_PAGES);
    }
};

// Simulated physical memory where each frame stores the owner info.
class PhysicalMemory {
public:
    // FrameInfo stores which process (pid) owns the frame and which virtual page is stored.
    struct FrameInfo {
        int pid;            // Owner process id (-1 if free).
        size_t virtualPage; // The corresponding virtual page.
        bool dirty;         // True if the page has been modified.
        FrameInfo() : pid(-1), virtualPage(0), dirty(false) {}
    };

    vector<FrameInfo> frames;
    PhysicalMemory() {
        frames.resize(NUM_PHYSICAL_FRAMES);
    }
};

// The VirtualMemoryManager manages processes, translation, page faults, and replacement
class VirtualMemoryManager {
private:
    PhysicalMemory physMem;
    queue<size_t> freeFrames;   
    // FIFO queue to determine the replacement order.
    // Each entry is a pair: (process id, virtual page number).
    queue<pair<int, size_t>> fifoQueue;
    
public:
    // Processes in the system (each page table)
    unordered_map<int, Process*> processes;
    
    VirtualMemoryManager() {
        // Initialize free physical frames
        for (size_t i = 0; i < NUM_PHYSICAL_FRAMES; i++) {
            freeFrames.push(i);
        }
    }
    
    ~VirtualMemoryManager() {
        // Clean up allocated process objects.
        for (auto &entry : processes) {
            delete entry.second;
        }
    }
    
    // Create a new process and its page table
    void addProcess(int pid) {
        if (processes.find(pid) == processes.end()) {
            processes[pid] = new Process(pid);
        }
    }
    
    // Translate a virtual address (for a given process) to a physical address
    // If the requested page is not in physical memory, a page fault occurs
    size_t translate(int pid, size_t virtualAddress, bool write = false) {
        if (processes.find(pid) == processes.end()) {
            cerr << "Error: Process " << pid << " not found.\n";
            return 0;
        }
        Process* proc = processes[pid];
        size_t virtualPage = virtualAddress / PAGE_SIZE;
        size_t offset = virtualAddress % PAGE_SIZE;
        
        // Check if the virtual page is within this process's address space.
        if (virtualPage >= proc->pageTable.size()) {
            cerr << "Error: Invalid virtual address for process " << pid << ".\n";
            return 0;
        }
        
        PageTableEntry &pte = proc->pageTable[virtualPage];
        
        // If the page is present in physical memory, update metadata if it's a write.
        if (pte.valid) {
            if (write) {
                pte.dirty = true;
                physMem.frames[pte.frameNumber].dirty = true;
            }
            return pte.frameNumber * PAGE_SIZE + offset;
        } else {
            // Page fault handling.
            cout << "Page fault in process " << pid << " for virtual page " << virtualPage << endl;
            handlePageFault(pid, virtualPage);
            // After handling, call translate() again to complete the translation.
            return translate(pid, virtualAddress, write);
        }
    }
    
    // Handle a page fault by loading the requested virtual page into a physical frame
    // If no free frames exist, evict one page using FIFO replacement
    void handlePageFault(int pid, size_t virtualPage) {
        Process* proc = processes[pid];
        size_t frameNumber;
        
        if (!freeFrames.empty()) {
            // Use a free frame.
            frameNumber = freeFrames.front();
            freeFrames.pop();
        } else {
            // No free frames are available; evict the oldest page using FIFO.
            pair<int, size_t> victim = fifoQueue.front();
            fifoQueue.pop();
            int victimPid = victim.first;
            size_t victimVirtualPage = victim.second;
            Process* victimProc = processes[victimPid];
            PageTableEntry &victimPte = victimProc->pageTable[victimVirtualPage];
            frameNumber = victimPte.frameNumber;
            
            cout << "Evicting page: Process " << victimPid 
                 << ", Virtual Page " << victimVirtualPage 
                 << " from frame " << frameNumber << endl;
                 
            // If the evicted page was dirty, in a real system you would write it back to disk.
            // For simulation purposes, we simply mark it invalid.
            victimPte.valid = false;
        }
        
        // Load the requested page into the selected physical frame
        proc->pageTable[virtualPage].valid = true;
        proc->pageTable[virtualPage].frameNumber = frameNumber;
        proc->pageTable[virtualPage].dirty = false;
        physMem.frames[frameNumber].pid = pid;
        physMem.frames[frameNumber].virtualPage = virtualPage;
        physMem.frames[frameNumber].dirty = false;
        
        // Add the newly loaded page to the FIFO queue.
        fifoQueue.push({pid, virtualPage});
    }
};

int main() {
    VirtualMemoryManager vmm;
    
    // Add two processes with unique process IDs.
    vmm.addProcess(1);
    vmm.addProcess(2);
    
    // Simulate memory accesses.
    // Process 1 accesses virtual address 8192 (belongs to virtual page 2).
    size_t physAddr1 = vmm.translate(1, 8192, true);  // Write access.
    cout << "Process 1: Virtual address 8192 -> Physical address " << physAddr1 << endl;
    
    // Process 2 accesses virtual address 0 (virtual page 0).
    size_t physAddr2 = vmm.translate(2, 0);
    cout << "Process 2: Virtual address 0 -> Physical address " << physAddr2 << endl;
    
    // Process 1 accesses virtual address 4096 (virtual page 1).
    size_t physAddr3 = vmm.translate(1, 4096);
    cout << "Process 1: Virtual address 4096 -> Physical address " << physAddr3 << endl;
    
    // Additional accesses from Process 1 to force new page loads and eventually trigger FIFO eviction.
    for (size_t i = 3; i < 10; i++) {
        size_t va = i * PAGE_SIZE + 100;  // Some offset within the page.
        size_t pa = vmm.translate(1, va);
        cout << "Process 1: Virtual address " << va 
             << " -> Physical address " << pa << endl;
    }
    
    return 0;
}
