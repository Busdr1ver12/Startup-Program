#ifndef PROCESS_H
#define PROCESS_H

#include <iostream>
#include <string>
#include <vector>

using namespace std;

// Defines different states a process can be in, useful for scheduling and state transitions.
enum ProcessState { NEW, READY, RUNNING, WAITING, TERMINATED };

class Process {
private:
    int pid;
    int arrival_time;
    int burst_time;
    int priority;
    ProcessState state;
    int remaining_time;
    int waiting_time;
    int turnaround_time;
    int memory_required;
    vector<string> io_operations;

public:
    // Constructor
    // Initializes process attributes, including optional I/O operations.
    Process(int pid, int arrival, int burst, int priority, int memory, vector<string> io_ops = {})
        : pid(pid),
          arrival_time(arrival),
          burst_time(burst),
          priority(priority),
          state(NEW),
          remaining_time(burst),
          waiting_time(0),
          turnaround_time(0),
          memory_required(memory),
          io_operations(io_ops) {}

    // Getters
    int getPID() const { return pid; }
    int getArrivalTime() const { return arrival_time; }
    int getBurstTime() const { return burst_time; }
    int getPriority() const { return priority; }
    ProcessState getState() const { return state; }
    int getRemainingTime() const { return remaining_time; }
    int getWaitingTime() const { return waiting_time; }
    int getTurnaroundTime() const { return turnaround_time; }
    int getMemoryRequired() const { return memory_required; }
    const vector<string>& getIOOperations() const { return io_operations; }

    // Setters
    void setState(ProcessState newState) { state = newState; }
    void setWaitingTime(int time) { waiting_time = time; }
    void setTurnaroundTime(int time) { turnaround_time = time; }

    // Update state
    void updateState(ProcessState newState) {
        state = newState;
    }

    // Decrement remaining time
    // This method simulates CPU execution by decrementing remaining time and updates state when complete.
    void executeTimeSlice(int time) {
        if (remaining_time > 0) {
            remaining_time -= time;
            if (remaining_time <= 0) {
                remaining_time = 0;
                state = TERMINATED;
            }
        }
    }

    // Display process details
    void displayProcessInfo() const {
        cout << "PID: " << pid << " | Arrival: " << arrival_time
             << " | Burst: " << burst_time << " | Priority: " << priority
             << " | State: " << state << " | Remaining: " << remaining_time
             << " | Waiting: " << waiting_time << " | Turnaround: " << turnaround_time
             << " | Memory: " << memory_required << " KB" << endl;
    }
};

#endif
