
#include <iostream>
#include <vector>
#include <algorithm>
#include <queue>
using namespace std;

struct Process { 
int pid; // The Process ID
int Arrival; //Arrival time
int Burst; //Burst time
int Completion; //Completion time
int Turnaround; //Turn Around time
int Waiting; //Waiting time
int Remaining; // Remaining time
Process(int id, int at, int bt) : pid(id), Arrival(at), Burst(bt), Remaining(bt), Completion(0), Turnaround(0), Waiting(0) {}
};

bool compareArrival(const Process &a, const Process &b) { 
return a.Arrival < b.Arrival; //Testing the difference in arrival times of processes to sort
}
vector<Process> FCFS(vector<Process> processes) { //First Come First Serve Algorithm
sort(processes.begin(), processes.end(), compareArrival);
int Current = 0; //Current Time...again
int total_turnaround = 0;
int total_waiting = 0;
for (auto &process : processes) { 
if (Current < process.Arrival)
Current = process.Arrival;
process.Waiting = Current - process.Arrival;
process.Completion = Current + process.Burst;
process.Turnaround = process.Completion - process.Arrival;
Current += process.Burst;
total_turnaround += process.Turnaround;
total_waiting += process.Waiting;
}
cout << "FCFS:" << endl; //output

for (const auto &p : processes) { 
cout << "Process " << p.pid << ": Completion Time = " << p.Completion
<< ", Turnaround Time = " << p.Turnaround
<< ", Waiting Time = " << p.Waiting << endl;
}
cout << "Average Turnaround Time: " << (double)total_turnaround / processes.size() << endl; 
cout << "Average Waiting Time: " << (double)total_waiting / processes.size() << "\n" << endl;
return processes;
}

vector<Process> SJF(vector<Process> processes) {
sort(processes.begin(), processes.end(), compareArrival);
int Current = 0;
int total_turnaround = 0;
int total_waiting = 0;
int index = 0;
priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> ready_queue;
vector<Process> processed;
while (processed.size() < processes.size()) {
while (index < processes.size() && processes[index].Arrival <= Current) {
ready_queue.push({processes[index].Burst, index});
index++;
}
if (!ready_queue.empty()) {
int idx = ready_queue.top().second;
ready_queue.pop();
processes[idx].Waiting = Current - processes[idx].Arrival;
processes[idx].Completion = Current + processes[idx].Burst;
processes[idx].Turnaround = processes[idx].Completion - processes[idx].Arrival;
Current += processes[idx].Burst;
processed.push_back(processes[idx]);
total_turnaround += processes[idx].Turnaround;
total_waiting += processes[idx].Waiting;
}
else {
Current = processes[index].Arrival;
}
}
cout << "SJF: " << endl;
for (const auto &p : processed) {
cout << "Process " << p.pid << ": Completion Time = " << p.Completion
<< ", Turnaround Time = " << p.Turnaround
<< ", Waiting Time = " << p.Waiting << endl;
} 
cout << "Average Turnaround Time: " << (double)total_turnaround / processed.size() << endl;
cout << "Average Waiting Time: " << (double)total_waiting / processed.size() << "\n" << endl; 
return processed;
}


int main() {
vector<Process> process_list = {Process(1, 0, 8), Process(2, 1, 4), Process(3, 2, 9), Process(4, 3, 5)};
FCFS(process_list);
SJF(process_list);
 
return 0;
